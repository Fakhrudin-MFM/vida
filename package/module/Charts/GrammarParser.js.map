{"version":3,"sources":["../../src/Charts/GrammarParser.tsx"],"names":["GrammarParser","jsonData","getData","name","values","data","forEach","d","getNivoPieData","group","value","colors","dataPoints","index","push","getNivoLineData","dataArray","axes","lineData","y","dataColumns","yAxis","color","lData","id","isNaN","x","dataColumn","getNivoBarData","barData","dp","keys","getNivoScatterData","getVizInfo","els","containerCssStyle","width","height","charts","chart","chartType","type","dataName","colX","position","colSpan","columns","rowSpan","rows","colXClass","colSpanClass","rowSpanClass","el","scatterData","pieData","gridEl","vizInfo"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport NivoLineChart from \"./NivoLineChart\"\nimport NivoBarChart from \"./NivoBarChart\"\nimport NivoScatterChart from \"./NivoScatterChart\"\nimport NivoPieChart from \"./NivoPieChart\"\nimport { JSONVizData, XYAxes, JSONChartDataColumn, IHash } from \"./VizData\"\n\nconst GrammarParser = (jsonData: JSONVizData) => {\n\n  const getData = (name: string): object[] => {\n    let values = null\n    jsonData.data.forEach((d) => {\n      if (d.name == name) {\n        values = d.values\n      }\n    })\n    return values\n  }\n\n  const getNivoPieData = (data: any, group: any, value: any, colors: any): any => {\n    let dataPoints: any = []\n    data.forEach((d: any, index: any) => {\n      dataPoints.push({\"id\": d[group], \"label\": d[group], \"value\": d[value], \"color\": colors[index % colors]})\n    })\n    return dataPoints\n  }\n\n  const getNivoLineData = (dataArray: any, axes: XYAxes): any => {\n    let lineData: any = []\n    let colors: any = []\n    axes.y.dataColumns.forEach((yAxis: JSONChartDataColumn) => {\n      colors.push(yAxis.color)\n      let data: any = []\n      let lData = {id: yAxis.name, color: yAxis.color, data: data}\n      dataArray.forEach((d: IHash) => {\n        if (!isNaN(d[yAxis.name])) {\n          lData.data.push({x: d[axes.x.dataColumn], y: d[yAxis.name]})\n        }\n      })\n      lineData.push(lData)\n    })\n    return {data: lineData, colors: colors}\n  }\n\n  const getNivoBarData = (dataArray: object[], axes: XYAxes): any => {\n    let barData: any = []\n    dataArray.forEach((d: IHash) => {\n      let dp: IHash = {}\n      axes.y.dataColumns.forEach((yAxis) => {\n        dp[axes.x.dataColumn] = d[axes.x.dataColumn]\n        dp[yAxis.name] = d[yAxis.name]\n        dp[yAxis.name + \"Color\"] = yAxis.color\n      })\n      barData.push(dp)\n    })\n    let keys: string[] = [], colors: string[] = []\n    axes.y.dataColumns.forEach((yAxis: JSONChartDataColumn) => {\n      keys.push(yAxis.name)\n      colors.push(yAxis.color)\n    })\n    return {data: barData, keys: keys, colors: colors}\n  }\n\n  const getNivoScatterData = (dataArray: any): any => {\n    return {data: dataArray}\n  }\n\n  const getVizInfo = (): any => {\n    return {\"name\": jsonData[\"name\"], \"description\": jsonData[\"description\"], \"header\": jsonData[\"header\"]}\n  }\n\n  let els: JSX.Element[] = []\n  const containerCssStyle = {\n    width: \"100%\",\n    height: \"100%\"\n  }\n  jsonData.charts.forEach((chart, index) => {\n    const chartType = chart.type\n    const dataName = chart.data\n    const data = getData(dataName)\n    const colX = chart.position.x + 1,\n          colSpan = chart.position.columns,\n          rowSpan = chart.position.rows,\n          colXClass = \"col-start-\" + colX,\n          colSpanClass = \"col-span-\" + colSpan,\n          rowSpanClass = \"row-span-\" + rowSpan\n    let el: JSX.Element = null\n    if (chartType == \"line\") {\n      const lineData = getNivoLineData(data, chart.axes)\n      el = <div key={\"line-chart-container-\" + index} style={containerCssStyle}\n              className={colXClass + \" \" + colSpanClass + \" \" + rowSpanClass}\n            >\n              <NivoLineChart\n                key={\"line-chart-\" + index}\n                chartTitle={chart[\"title\"]}\n                axes={chart[\"axes\"]}\n                colors={lineData.colors}\n                data={lineData.data} />\n            </div>\n    } else if (chartType == \"bar\") {\n      const barData = getNivoBarData(data, chart.axes)\n      el = <div key={\"bar-chart-container-\" + index} style={containerCssStyle}\n              className={colXClass + \" \" + colSpanClass + \" \" + rowSpanClass}\n            >\n              <NivoBarChart\n                key={\"bar-chart-\" + index}\n                chartTitle={chart[\"title\"]}\n                axes={chart[\"axes\"]}\n                keys={barData.keys}\n                colors={barData.colors}\n                data={barData.data} />\n            </div>\n    } else if (chartType == \"horizontal-bar\") {\n      const barData = getNivoBarData(data, chart.axes)\n      el = <div key={\"horizontal-bar-chart-container-\" + index} style={containerCssStyle}\n              className={colXClass + \" \" + colSpanClass + \" \" + rowSpanClass}\n            >\n              <NivoBarChart\n                key={\"horizontal-bar-chart-\" + index}\n                chartTitle={chart[\"title\"]}\n                horizontal={true}\n                axes={chart[\"axes\"]}\n                keys={barData.keys}\n                colors={barData.colors}\n                data={barData.data} />\n            </div>\n    } else if (chartType == \"scatter\") {\n      const scatterData = getNivoScatterData(data)\n      el = <div key={\"scatter-chart-container-\" + index} style={containerCssStyle}\n              className={colXClass + \" \" + colSpanClass + \" \" + rowSpanClass}\n            >\n              <NivoScatterChart\n                key={\"scatter-chart-\" + index}\n                axes={chart[\"axes\"]}\n                data={scatterData.data} />\n            </div>\n    } else if (chartType == \"area\") {\n      const lineData = getNivoLineData(data, chart.axes)\n      el = <div key={\"line-chart-container-\" + index} style={containerCssStyle}\n              className={colXClass + \" \" + colSpanClass + \" \" + rowSpanClass}\n            >\n              <NivoLineChart\n                key={\"line-chart-\" + index}\n                chartTitle={chart[\"title\"]}\n                enableArea={true}\n                axes={chart[\"axes\"]}\n                colors={lineData.colors}\n                data={lineData.data} />\n            </div>\n    } else if (chartType == \"pie\") {\n      const pieData = getNivoPieData(data, chart.group, chart.value, chart.colors)\n      el = <div key={\"pie-chart-container-\" + index} style={containerCssStyle}\n              className={colXClass + \" \" + colSpanClass + \" \" + rowSpanClass}\n            >\n              <NivoPieChart\n                key={\"pie-chart-\" + index}\n                data={pieData} />\n          </div>\n    }\n    els.push(el)\n  })\n  let gridEl = <div\n    className={\"grid grid-cols-\" + jsonData.columns + \" grid-rows-\" + jsonData.rows + \" gap-4\"}\n    style={containerCssStyle}>{els}</div>\n  return {charts: gridEl, vizInfo: getVizInfo()}\n}\n\nexport default GrammarParser\n"],"file":"GrammarParser.js"}